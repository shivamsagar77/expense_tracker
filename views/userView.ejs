<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Expense Tracker</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --warning-gradient: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
            --card-shadow: 0 10px 30px rgba(0,0,0,0.1);
            --border-radius: 15px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }

        .navbar {
            background: var(--primary-gradient) !important;
            box-shadow: 0 2px 20px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }

        .navbar-brand {
            font-weight: 700;
            font-size: 1.5rem;
        }

        .dashboard-card {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            transition: all 0.3s ease;
            overflow: hidden;
            background: white;
        }

        .dashboard-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        }

        .summary-card {
            color: white;
            position: relative;
            overflow: hidden;
        }

        .summary-card::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 100px;
            height: 100px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            transform: translate(30px, -30px);
        }

        .summary-card::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 80px;
            height: 80px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 50%;
            transform: translate(-20px, 20px);
        }

        .expense-summary {
            background: var(--primary-gradient);
        }

        .income-summary {
            background: var(--success-gradient);
        }

        .balance-summary {
            background: var(--secondary-gradient);
        }

        .summary-icon {
            font-size: 2.5rem;
            opacity: 0.8;
            margin-bottom: 1rem;
        }

        .summary-amount {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .summary-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .chart-container {
            position: relative;
            height: 300px;
            margin: 1rem 0;
        }

        .transaction-item {
            border-left: 4px solid transparent;
            transition: all 0.3s ease;
            border-radius: 8px;
            margin-bottom: 0.5rem;
        }

        .transaction-item:hover {
            background: #f8f9fa;
            transform: translateX(5px);
        }

        .transaction-expense {
            border-left-color: #dc3545;
        }

        .transaction-income {
            border-left-color: #28a745;
        }

        .btn-action {
            border-radius: 25px;
            padding: 0.5rem 1.5rem;
            font-weight: 500;
            transition: all 0.3s ease;
            border: none;
        }

        .btn-action:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .btn-primary {
            background: var(--primary-gradient);
        }

        .btn-success {
            background: var(--success-gradient);
        }

        .btn-warning {
            background: var(--warning-gradient);
            color: #333;
        }

        .modal-content {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        }

        .modal-header {
            background: var(--primary-gradient);
            color: white;
            border: none;
            border-radius: var(--border-radius) var(--border-radius) 0 0;
        }

        .form-control {
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 0.75rem 1rem;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

        .loading-spinner {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .quick-actions {
            background: white;
            border-radius: var(--border-radius);
            padding: 1.5rem;
            box-shadow: var(--card-shadow);
        }

        .action-btn {
            width: 100%;
            margin-bottom: 0.75rem;
            border-radius: 10px;
            padding: 0.75rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .action-btn:hover {
            transform: translateY(-2px);
        }

        .premium-badge {
            background: linear-gradient(135deg, #ffd700, #ffed4e);
            color: #333;
            font-weight: 600;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
        }

        .free-badge {
            background: #6c757d;
            color: white;
            font-weight: 600;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
        }

        @media (max-width: 768px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .summary-amount {
                font-size: 1.5rem;
            }
            
            .chart-container {
                height: 250px;
            }
        }

        .pulse-animation {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container">
            <a class="navbar-brand" href="#">
                <i class="fas fa-wallet me-2"></i>Expense Tracker
            </a>
            <div class="navbar-nav ms-auto d-flex align-items-center">
                <div class="me-3">
                    <span class="navbar-text me-2">
                        <i class="fas fa-user-circle me-1"></i>Welcome, <%= user.name %>!
                    </span>
                    <% if (user.ispremimumuser) { %>
                        <span class="premium-badge">
                            <i class="fas fa-crown me-1"></i>Premium
                        </span>
                    <% } else { %>
                        <span class="free-badge">Free</span>
                    <% } %>
                </div>
                <a class="btn btn-outline-light btn-sm" href="/logout">
                    <i class="fas fa-sign-out-alt me-1"></i>Logout
                </a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <!-- Stats Grid -->
        <div class="stats-grid fade-in">
            <div class="card dashboard-card summary-card expense-summary">
                <div class="card-body text-center position-relative">
                    <i class="fas fa-credit-card summary-icon"></i>
                    <div class="summary-amount">₹<%= user.totalexpense || 0 %></div>
                    <div class="summary-label">Total Expenses</div>
                </div>
            </div>
            <div class="card dashboard-card summary-card income-summary">
                <div class="card-body text-center position-relative">
                    <i class="fas fa-arrow-up summary-icon"></i>
                    <div class="summary-amount" id="monthlyIncome">₹0</div>
                    <div class="summary-label">This Month Income</div>
                </div>
            </div>
            <div class="card dashboard-card summary-card balance-summary">
                <div class="card-body text-center position-relative">
                    <i class="fas fa-wallet summary-icon"></i>
                    <div class="summary-amount" id="balance">₹0</div>
                    <div class="summary-label">Current Balance</div>
                </div>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-lg-8">
                <!-- Chart Section -->
                <div class="card dashboard-card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-chart-pie me-2"></i>Expense Analytics
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="chart-container">
                            <canvas id="expenseChart"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Recent Transactions -->
                <div class="card dashboard-card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-history me-2"></i>Recent Transactions
                        </h5>
                        <button class="btn btn-primary btn-action" data-bs-toggle="modal" data-bs-target="#addExpenseModal">
                            <i class="fas fa-plus me-1"></i>Add Expense
                        </button>
                    </div>
                    <div class="card-body">
                        <div id="expensesList">
                            <div class="loading-spinner">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-4">
                <!-- Quick Actions -->
                <div class="quick-actions mb-4">
                    <h5 class="mb-3">
                        <i class="fas fa-bolt me-2"></i>Quick Actions
                    </h5>
                    <button class="btn btn-primary action-btn" data-bs-toggle="modal" data-bs-target="#addExpenseModal">
                        <i class="fas fa-plus me-2"></i>Add Expense
                    </button>
                    <% if (user.ispremimumuser) { %>
                        <button class="btn btn-success action-btn" data-bs-toggle="modal" data-bs-target="#addIncomeModal">
                            <i class="fas fa-arrow-up me-2"></i>Add Income
                        </button>
                    <% } else { %>
                        <button class="btn btn-success action-btn" onclick="showPremiumAlert()">
                            <i class="fas fa-arrow-up me-2"></i>Add Income (Premium)
                        </button>
                    <% } %>
                    <button class="btn btn-info action-btn" onclick="viewReports()">
                        <i class="fas fa-chart-bar me-2"></i>View Reports
                    </button>
                    <% if (!user.ispremimumuser) { %>
                        <button class="btn btn-warning action-btn pulse-animation" onclick="upgradeToPremium()">
                            <i class="fas fa-crown me-2"></i>Upgrade to Premium
                        </button>
                    <% } %>
                </div>

                <!-- Monthly Summary -->
                <div class="card dashboard-card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-calendar-alt me-2"></i>This Month
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <span>Income:</span>
                            <span class="text-success fw-bold" id="monthlyIncomeSummary">₹0</span>
                        </div>
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <span>Expenses:</span>
                            <span class="text-danger fw-bold" id="monthlyExpenseSummary">₹0</span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="fw-bold">Balance:</span>
                            <span class="fw-bold" id="monthlyBalanceSummary">₹0</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Expense Modal -->
    <div class="modal fade" id="addExpenseModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Expense</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addExpenseForm">
                        <div class="mb-3">
                            <label for="amount" class="form-label">Amount</label>
                            <input type="number" class="form-control" id="amount" name="amount" step="0.01" required>
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <input type="text" class="form-control" id="description" name="description" required>
                        </div>
                        <div class="mb-3">
                            <label for="category" class="form-label">Category</label>
                            <select class="form-control" id="category" name="category_id" required>
                                <option value="">Select Category</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="note" class="form-label">Note (Optional)</label>
                            <textarea class="form-control" id="note" name="note" rows="2"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="addExpense()">Add Expense</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Income Modal (Premium Only) -->
    <div class="modal fade" id="addIncomeModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Income</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addIncomeForm">
                        <div class="mb-3">
                            <label for="income_amount" class="form-label">Income Amount</label>
                            <input type="number" class="form-control" id="income_amount" name="income_amount" step="0.01" required>
                        </div>
                        <div class="mb-3">
                            <label for="income_description" class="form-label">Description</label>
                            <input type="text" class="form-control" id="income_description" name="income_description" required>
                        </div>
                        <div class="mb-3">
                            <label for="income_source" class="form-label">Source</label>
                            <input type="text" class="form-control" id="income_source" name="income_source" required>
                        </div>
                        <div class="mb-3">
                            <label for="income_note" class="form-label">Note (Optional)</label>
                            <textarea class="form-control" id="income_note" name="note" rows="2"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" onclick="addIncome()">Add Income</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Payment Modal -->
    <div class="modal fade" id="paymentModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Upgrade to Premium</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center">
                        <h4>Premium Features</h4>
                        <ul class="list-unstyled">
                            <li>✅ Income Tracking</li>
                            <li>✅ Advanced Reports</li>
                            <li>✅ Leaderboard Access</li>
                            <li>✅ Priority Support</li>
                        </ul>
                        <h5 class="text-warning">₹299/month</h5>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-warning" onclick="initiatePayment()">Pay Now</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables
        let authToken = '<%= user.token || "" %>';
        let userId = <%= user.id %>;
        let isPremium = <%= user.ispremimumuser %>;

        // Load expenses on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Set initial total expense from server data
            const initialTotalExpense = <%= user.totalexpense || 0 %>;
            const totalExpenseElement = document.querySelector('.expense-summary .summary-amount');
            if (totalExpenseElement) {
                totalExpenseElement.textContent = `₹${initialTotalExpense}`;
            }
            
            loadExpenses();
            loadCategories();
            
            // Also refresh totals after a short delay to ensure data is loaded
            setTimeout(() => {
                loadExpenses();
            }, 1000);
        });

        // Load expenses from API
        async function loadExpenses() {
            try {
                // console.log('Loading expenses with token:', authToken ? 'Present' : 'Missing');
                const response = await fetch('/expenses', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`,
                        'Content-Type': 'application/json'
                    }
                });

                // console.log('Response status:', response.status);
                
                if (response.ok) {
                    const expenses = await response.json();
                    // console.log('Received expenses:', expenses);
                    displayExpenses(expenses);
                } else {
                    const errorText = await response.text();
                    console.error('Error response:', errorText);
                    document.getElementById('expensesList').innerHTML = '<p class="text-danger">Error loading expenses: ' + response.status + '</p>';
                }
            } catch (error) {
                console.error('Error loading expenses:', error);
                document.getElementById('expensesList').innerHTML = '<p class="text-danger">Error loading expenses: ' + error.message + '</p>';
            }
        }

        // Display expenses in UI
        function displayExpenses(expenses) {
            const expensesList = document.getElementById('expensesList');
            
            if (expenses.length === 0) {
                expensesList.innerHTML = `
                    <div class="text-center py-5">
                        <i class="fas fa-receipt fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No transactions yet. Start by adding an expense!</p>
                    </div>
                `;
                return;
            }

            let html = '';
            let totalIncome = 0;
            let totalExpense = 0;
            let monthlyIncome = 0;
            let monthlyExpense = 0;
            const currentMonth = new Date().getMonth();
            const currentYear = new Date().getFullYear();
            
            expenses.forEach(expense => {
                const date = new Date(expense.created_at);
                const categoryName = expense.Category ? expense.Category.name : 'Unknown';
                const amount = parseFloat(expense.amount || 0);
                const incomeAmount = parseFloat(expense.income_amount || 0);
                
                // Debug logging (remove in production)
                // console.log('Expense data:', {
                //     description: expense.description,
                //     amount: amount,
                //     income_amount: incomeAmount,
                //     date: date.toLocaleDateString(),
                //     raw_amount: expense.amount,
                //     raw_income_amount: expense.income_amount
                // });
                
                // Calculate totals - ensure we're adding valid numbers
                if (!isNaN(amount)) {
                    totalExpense += amount;
                }
                if (!isNaN(incomeAmount)) {
                    totalIncome += incomeAmount;
                }
                
                // Calculate monthly totals
                if (date.getMonth() === currentMonth && date.getFullYear() === currentYear) {
                    if (!isNaN(amount)) {
                        monthlyExpense += amount;
                    }
                    if (!isNaN(incomeAmount)) {
                        monthlyIncome += incomeAmount;
                    }
                }
                
                const isExpense = amount > 0;
                const transactionClass = isExpense ? 'transaction-expense' : 'transaction-income';
                const amountClass = isExpense ? 'text-danger' : 'text-success';
                const amountPrefix = isExpense ? '-' : '+';
                const displayAmount = isExpense ? amount : incomeAmount;
                const icon = isExpense ? 'fa-arrow-down' : 'fa-arrow-up';
                
                html += `
                    <div class="transaction-item ${transactionClass} p-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    <i class="fas ${icon} fa-lg ${amountClass}"></i>
                                </div>
                                <div>
                                    <h6 class="mb-1">${expense.description}</h6>
                                    <small class="text-muted">
                                        <i class="fas fa-tag me-1"></i>${categoryName} • 
                                        <i class="fas fa-calendar me-1"></i>${date.toLocaleDateString()}
                                    </small>
                                </div>
                            </div>
                            <div class="text-end">
                                <div class="fw-bold ${amountClass}">${amountPrefix}₹${displayAmount}</div>
                                <button class="btn btn-sm btn-outline-danger mt-1" onclick="deleteExpense(${expense.id})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            expensesList.innerHTML = html;
            
            // Debug logging for totals
            // console.log('Calculated totals:', {
            //     totalExpense: totalExpense,
            //     totalIncome: totalIncome,
            //     monthlyExpense: monthlyExpense,
            //     monthlyIncome: monthlyIncome
            // });
            
            // Update summary cards
            document.getElementById('monthlyIncome').textContent = `₹${monthlyIncome}`;
            document.getElementById('balance').textContent = `₹${totalIncome - totalExpense}`;
            document.getElementById('monthlyIncomeSummary').textContent = `₹${monthlyIncome}`;
            document.getElementById('monthlyExpenseSummary').textContent = `₹${monthlyExpense}`;
            document.getElementById('monthlyBalanceSummary').textContent = `₹${monthlyIncome - monthlyExpense}`;
            
            // Update the main total expense display (this was missing!)
            const totalExpenseElement = document.querySelector('.expense-summary .summary-amount');
            if (totalExpenseElement) {
                totalExpenseElement.textContent = `₹${totalExpense}`;
                // console.log('Updated total expense display to:', totalExpense);
            } else {
                // console.log('Total expense element not found!');
            }
            
            // Update chart
            updateChart(expenses);
        }

        // Load categories for dropdown
        async function loadCategories() {
            try {
                const response = await fetch('/categories', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const categories = await response.json();
                    const categorySelect = document.getElementById('category');
                    
                    categories.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category.id;
                        option.textContent = category.name;
                        categorySelect.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading categories:', error);
            }
        }

        // Add expense
        async function addExpense() {
            const form = document.getElementById('addExpenseForm');
            const formData = new FormData(form);
            
            const expenseData = {
                amount: formData.get('amount'),
                description: formData.get('description'),
                category_id: formData.get('category_id'),
                note: formData.get('note')
            };

            try {
                const response = await fetch('/expenses', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${authToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(expenseData)
                });

                if (response.ok) {
                    // Close modal and reload expenses
                    bootstrap.Modal.getInstance(document.getElementById('addExpenseModal')).hide();
                    form.reset();
                    loadExpenses();
                    location.reload(); // Reload to update total expense
                } else {
                    alert('Error adding expense');
                }
            } catch (error) {
                console.error('Error adding expense:', error);
                alert('Error adding expense');
            }
        }

        // Add income (Premium only)
        async function addIncome() {
            if (!isPremium) {
                showPremiumAlert();
                return;
            }

            const form = document.getElementById('addIncomeForm');
            const formData = new FormData(form);
            
            const incomeData = {
                income_amount: formData.get('income_amount'),
                income_description: formData.get('income_description'),
                income_source: formData.get('income_source'),
                note: formData.get('note')
            };

            try {
                const response = await fetch('/expenses', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${authToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(incomeData)
                });

                if (response.ok) {
                    bootstrap.Modal.getInstance(document.getElementById('addIncomeModal')).hide();
                    form.reset();
                    loadExpenses();
                } else {
                    alert('Error adding income');
                }
            } catch (error) {
                console.error('Error adding income:', error);
                alert('Error adding income');
            }
        }

        // Delete expense
        async function deleteExpense(expenseId) {
            if (!confirm('Are you sure you want to delete this expense?')) {
                return;
            }

            try {
                const response = await fetch(`/expenses/${expenseId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${authToken}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    loadExpenses();
                    location.reload(); // Reload to update total expense
                } else {
                    alert('Error deleting expense');
                }
            } catch (error) {
                console.error('Error deleting expense:', error);
                alert('Error deleting expense');
            }
        }

        // Show premium alert
        function showPremiumAlert() {
            if (confirm('This feature is available for premium users only. Would you like to upgrade to premium now?')) {
                window.location.href = '/payment';
            }
        }

        // Upgrade to premium
        function upgradeToPremium() {
            // Redirect to payment page instead of showing modal
            window.location.href = '/payment';
        }

        // Initiate payment
        async function initiatePayment() {
            const paymentData = {
                amount: 299,
                customerId: userId,
                customerPhone: '9999999999', // You can get this from user profile
                customerEmail: '<%= user.email %>',
                returnUrl: window.location.origin + '/payment-success'
            };

            try {
                const response = await fetch('/payment-api/create-order', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${authToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(paymentData)
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        // Redirect to payment gateway
                        window.location.href = `https://sandbox.cashfree.com/pg/web/pay/${result.data.paymentSessionId}`;
                    } else {
                        alert('Error creating payment order');
                    }
                } else {
                    alert('Error creating payment order');
                }
            } catch (error) {
                console.error('Error initiating payment:', error);
                alert('Error initiating payment');
            }
        }

        // View reports
        function viewReports() {
            if (!isPremium) {
                showPremiumAlert();
                return;
            }
            alert('Reports feature coming soon!');
        }

        // Logout
        function logout() {
            if (confirm('Are you sure you want to logout?')) {
                window.location.href = '/logout';
            }
        }

        // Chart functionality
        let expenseChart = null;

        function updateChart(expenses) {
            const ctx = document.getElementById('expenseChart').getContext('2d');
            
            // Calculate category totals
            const categoryTotals = {};
            expenses.forEach(expense => {
                if (expense.amount > 0) { // Only count expenses, not income
                    const categoryName = expense.Category ? expense.Category.name : 'Unknown';
                    categoryTotals[categoryName] = (categoryTotals[categoryName] || 0) + parseFloat(expense.amount);
                }
            });

            const labels = Object.keys(categoryTotals);
            const data = Object.values(categoryTotals);
            const colors = [
                '#667eea', '#764ba2', '#f093fb', '#f5576c', 
                '#4facfe', '#00f2fe', '#ffecd2', '#fcb69f',
                '#a8edea', '#fed6e3', '#d299c2', '#fef9d7'
            ];

            if (expenseChart) {
                expenseChart.destroy();
            }

            if (labels.length === 0) {
                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                ctx.font = '16px Arial';
                ctx.fillStyle = '#666';
                ctx.textAlign = 'center';
                ctx.fillText('No expense data to display', ctx.canvas.width / 2, ctx.canvas.height / 2);
                return;
            }

            expenseChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: colors.slice(0, labels.length),
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 20,
                                usePointStyle: true
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((context.parsed / total) * 100).toFixed(1);
                                    return `${context.label}: ₹${context.parsed} (${percentage}%)`;
                                }
                            }
                        }
                    },
                    cutout: '60%'
                }
            });
        }

        // Add smooth animations
        document.addEventListener('DOMContentLoaded', function() {
            // Animate cards on load
            const cards = document.querySelectorAll('.dashboard-card');
            cards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                setTimeout(() => {
                    card.style.transition = 'all 0.5s ease';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, index * 100);
            });

            // Add loading states to buttons
            document.querySelectorAll('.btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    if (!this.disabled) {
                        this.style.transform = 'scale(0.95)';
                        setTimeout(() => {
                            this.style.transform = 'scale(1)';
                        }, 150);
                    }
                });
            });
        });

        // Enhanced form validation
        function validateForm(formId) {
            const form = document.getElementById(formId);
            const inputs = form.querySelectorAll('input[required], select[required]');
            let isValid = true;

            inputs.forEach(input => {
                if (!input.value.trim()) {
                    input.classList.add('is-invalid');
                    isValid = false;
                } else {
                    input.classList.remove('is-invalid');
                }
            });

            return isValid;
        }

        // Add form validation to expense form
        document.getElementById('addExpenseForm').addEventListener('submit', function(e) {
            if (!validateForm('addExpenseForm')) {
                e.preventDefault();
                alert('Please fill in all required fields');
            }
        });

        // Add form validation to income form
        document.getElementById('addIncomeForm').addEventListener('submit', function(e) {
            if (!validateForm('addIncomeForm')) {
                e.preventDefault();
                alert('Please fill in all required fields');
            }
        });
    </script>
</body>
</html>

